/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    get: operations["getUsers"];
    post: operations["createUser"];
  };
  "/rooms": {
    get: operations["getRooms"];
  };
  "/users/{userid}": {
    get: operations["getUserById"];
    put: operations["updateUserById"];
    delete: operations["deleteUserById"];
    parameters: {
      path: {
        /** ID of the requested user. */
        userid: components["schemas"]["Id"];
      };
    };
  };
  "/users/{userid}/rooms": {
    get: operations["getRoomsByUserId"];
    post: operations["createRoom"];
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
    };
  };
  "/users/{userid}/friends": {
    get: operations["getFriendshipsByUserId"];
    /** Creates a Friendship object where the Requester is the CLIENT user and the Recipient is the {userid}. The status is 'PENDING'. */
    post: operations["createFriendshipByUserId"];
    /** Patches the `status` property of an existing Friendship object to be either 'ACCEPTED' or 'REJECTED'. CLIENT ID must match {userid} for 'ACCEPTED' to be valid. CLIENT ID must match recipient or requester for 'REJECTED' to be valid. */
    patch: operations["updateFriendshipByUserId"];
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
    };
  };
  "/friends/{friendid}": {
    delete: operations["deleteFriend"];
    parameters: {
      path: {
        /** ID of the Friendship resource being deleted. */
        friendid: components["schemas"]["Id"];
      };
    };
  };
  "/rooms/{roomid}": {
    get: operations["getRoomById"];
    put: operations["updateRoomById"];
    delete: operations["deleteRoomById"];
    parameters: {
      path: {
        /** ID of the requested room. */
        roomid: components["schemas"]["Id"];
      };
    };
  };
  "/rooms/{roomid}/comments": {
    get: operations["getCommentsByRoomId"];
    post: operations["createComment"];
    parameters: {
      path: {
        /** ID of the room on which the comments are posted. */
        roomid: components["schemas"]["Id"];
      };
    };
  };
  "/rooms/{roomid}/likes": {
    get: operations["getLikesByRoom"];
    post: operations["createLike"];
    parameters: {
      path: {
        /** ID of the room on which the likes are made. */
        roomid: components["schemas"]["Id"];
      };
    };
  };
  "/comments/{commentid}": {
    delete: operations["deleteComment"];
    parameters: {
      path: {
        /** ID of the comment on which the comments are posted. */
        commentid: components["schemas"]["Id"];
      };
    };
  };
  "/likes/{likeid}": {
    delete: operations["deleteLike"];
    parameters: {
      path: {
        /** ID of the Like. */
        likeid: components["schemas"]["Id"];
      };
    };
  };
}

export interface components {
  schemas: {
    Id: string;
    User: {
      username: string;
      createdAt: components["schemas"]["Timestamp"];
      id: components["schemas"]["Id"];
    };
    Room: {
      title: string;
      url: string;
      creator: components["schemas"]["User"];
      createdAt: components["schemas"]["Timestamp"];
      id: components["schemas"]["Id"];
      likes?: number;
    };
    Comment: {
      content: string;
      user: components["schemas"]["User"];
      room: components["schemas"]["Id"];
      id: components["schemas"]["Id"];
      createdAt: components["schemas"]["Timestamp"];
    };
    Like: {
      user: components["schemas"]["User"];
      createdAt: components["schemas"]["Timestamp"];
      room: components["schemas"]["Id"];
      id: components["schemas"]["Id"];
    };
    Friendship: {
      requester: components["schemas"]["Id"];
      recipient: components["schemas"]["Id"];
      status: components["schemas"]["FriendshipStatus"];
      createdAt: components["schemas"]["Timestamp"];
      id: components["schemas"]["Id"];
    };
    /** @enum {string} */
    FriendshipStatus: "ACCEPTED" | "PENDING" | "REJECTED";
    /** Format: date-time */
    Timestamp: string;
    PaginationLinks: {
      next?: {
        /** Format: url */
        href: string;
        cursor?: string;
      };
    };
  };
  parameters: {
    /** @description A cursor for pagination queries. */
    Cursor: string;
    /** @description The number of items to return in a paginated request. */
    Limit: number;
  };
  requestBodies: {
    /** A JSON object containing info necessary to create/update a User record. */
    UserBody: {
      content: {
        "application/json": {
          username?: string;
          password?: string;
          passwordConfirm?: string;
        };
      };
    };
    /** An object containing info necessary to create/update a Room record. */
    RoomBody: {
      content: {
        "application/json": {
          title?: string;
        };
      };
    };
    /** A JSON object containing info necessary to create a Comment record. */
    CommentBody: {
      content: {
        "application/json": {
          content?: string;
        };
      };
    };
    /** A JSON object containing the new status of the friendship. */
    FriendRequestUpdateBody: {
      content: {
        "application/json": {
          status?: components["schemas"]["FriendshipStatus"];
        };
      };
    };
  };
}

export interface operations {
  getUsers: {
    parameters: {
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** A JSON array of users. */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["User"][];
          };
        };
      };
    };
  };
  createUser: {
    responses: {
      /** The returned user. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Invalid new user data was submitted. */
      400: unknown;
    };
    requestBody: components["requestBodies"]["UserBody"];
  };
  getRooms: {
    parameters: {
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** A JSON array of ShoeVox data objects */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["Room"][];
          };
        };
      };
    };
  };
  getUserById: {
    parameters: {
      path: {
        /** ID of the requested user. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** A JSON representation of a User. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** User could not be found. */
      404: unknown;
    };
  };
  updateUserById: {
    parameters: {
      path: {
        /** ID of the requested user. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** A JSON representation of the updated User. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Invalid value. */
      400: unknown;
      /** Client did not have required permissions to update user. */
      403: unknown;
      /** User could not be found. */
      404: unknown;
    };
    requestBody: components["requestBodies"]["UserBody"];
  };
  deleteUserById: {
    parameters: {
      path: {
        /** ID of the requested user. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** User was deleted successfully. */
      200: unknown;
      /** Client did not have required permissions to delete user. */
      403: unknown;
      /** User could not be found. */
      404: unknown;
    };
  };
  getRoomsByUserId: {
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** List of Rooms. */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["Room"][];
          };
        };
      };
      /** User not found. */
      404: unknown;
    };
  };
  createRoom: {
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** The newly created Room. */
      200: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** Could not create Room due to malformed data. */
      400: unknown;
      /** Could not create Room under given User due to insufficient permissions. */
      403: unknown;
      /** Could not create Room because given User could not be found. */
      404: unknown;
    };
  };
  getFriendshipsByUserId: {
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** A JSON array of Friendship objects. */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["Friendship"][];
          };
        };
      };
      /** Client did not have permission to access User's Friendships. */
      403: unknown;
      /** User not found. */
      404: unknown;
    };
  };
  /** Creates a Friendship object where the Requester is the CLIENT user and the Recipient is the {userid}. The status is 'PENDING'. */
  createFriendshipByUserId: {
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** The Friendship object created. */
      200: {
        content: {
          "application/json": components["schemas"]["Friendship"];
        };
      };
      /** User not found. */
      404: unknown;
    };
  };
  /** Patches the `status` property of an existing Friendship object to be either 'ACCEPTED' or 'REJECTED'. CLIENT ID must match {userid} for 'ACCEPTED' to be valid. CLIENT ID must match recipient or requester for 'REJECTED' to be valid. */
  updateFriendshipByUserId: {
    parameters: {
      path: {
        /** ID of the user who "owns" the resource. */
        userid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** The updated Friendship object. */
      200: {
        content: {
          "application/json": components["schemas"]["Friendship"];
        };
      };
      /** Invalid value. */
      400: unknown;
      /** Client not authorized to update Friend Request status. */
      403: unknown;
      /** User not found. */
      404: unknown;
    };
    requestBody: components["requestBodies"]["FriendRequestUpdateBody"];
  };
  deleteFriend: {
    parameters: {
      path: {
        /** ID of the Friendship resource being deleted. */
        friendid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully deleted Friend. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** Client did not have required permissions to delete Friend. */
      403: unknown;
      /** User or Friend could not be found. */
      404: unknown;
    };
  };
  getRoomById: {
    parameters: {
      path: {
        /** ID of the requested room. */
        roomid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns a room. */
      200: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** Room with requested ID could not be found. */
      404: unknown;
    };
  };
  updateRoomById: {
    parameters: {
      path: {
        /** ID of the requested room. */
        roomid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully updated room. */
      200: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** Invalid value. */
      400: unknown;
      /** Client did not have required permissions to update room. */
      403: unknown;
      /** Room could not be found. */
      404: unknown;
    };
    requestBody: components["requestBodies"]["RoomBody"];
  };
  deleteRoomById: {
    parameters: {
      path: {
        /** ID of the requested room. */
        roomid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully deleted room. */
      200: {
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** Client did not have required permissions to delete room. */
      403: unknown;
      /** Room could not be found. */
      404: unknown;
    };
  };
  getCommentsByRoomId: {
    parameters: {
      path: {
        /** ID of the room on which the comments are posted. */
        roomid: components["schemas"]["Id"];
      };
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** Returns the list of comments. */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["Comment"][];
          };
        };
      };
      /** Room could not be found. */
      404: unknown;
    };
  };
  createComment: {
    parameters: {
      path: {
        /** ID of the room on which the comments are posted. */
        roomid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully posted comment. */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** Invalid data. */
      400: unknown;
      /** Client was could not be authenticated. */
      403: unknown;
      /** Room could not be found. */
      404: unknown;
    };
    requestBody: components["requestBodies"]["CommentBody"];
  };
  getLikesByRoom: {
    parameters: {
      path: {
        /** ID of the room on which the likes are made. */
        roomid: components["schemas"]["Id"];
      };
      query: {
        /** A cursor for pagination queries. */
        cursor?: components["parameters"]["Cursor"];
        /** The number of items to return in a paginated request. */
        limit?: components["parameters"]["Limit"];
      };
    };
    responses: {
      /** Returns a list of Likes on a Room. */
      200: {
        content: {
          "application/json": {
            links: components["schemas"]["PaginationLinks"];
            data: components["schemas"]["Like"][];
          };
        };
      };
      /** Room not found. */
      404: unknown;
    };
  };
  createLike: {
    parameters: {
      path: {
        /** ID of the room on which the likes are made. */
        roomid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully added Like. */
      200: {
        content: {
          "application/json": components["schemas"]["Like"];
        };
      };
      /** Attempted to like while not authenticated. */
      403: unknown;
      /** Room not found. */
      404: unknown;
    };
  };
  deleteComment: {
    parameters: {
      path: {
        /** ID of the comment on which the comments are posted. */
        commentid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully deleted comment. */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** Client did not have the required permissions to delete comment. */
      403: unknown;
      /** Comment could not be found. */
      404: unknown;
    };
  };
  deleteLike: {
    parameters: {
      path: {
        /** ID of the Like. */
        likeid: components["schemas"]["Id"];
      };
    };
    responses: {
      /** Returns the successfully deleted Like. */
      200: {
        content: {
          "application/json": components["schemas"]["Like"];
        };
      };
      /** Client did not have the required permissions to delete Like. */
      403: unknown;
      /** Like could not be found. */
      404: unknown;
    };
  };
}

export interface external {}
